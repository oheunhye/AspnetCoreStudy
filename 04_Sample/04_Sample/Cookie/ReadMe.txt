1 쿠키와 세션의 기본개요
Http프로토콜은 연속적 연결이 아니라 
요청(Request)이 들어오고 응답(response)을 할때마다 연결을 해제한다.
서버는 클라이언트의 요청에 대해 독립적으로 작동

장점 : 다수의 클라이언트를 대상으로 하는 서버의 오버헤드를 줋일 수 있음.
단점 : 클라이언트가 두 번째 요청을 해와도 동일한 클라이언트로부터의 요청인지를
		인식하지 못하는 문제가 발생
이러한 문제점을 서비스 하기위해 Cookie,Session 등을 이용하여 
Http작업과 관련한 정보를 클라이언트, 서버 등에 저장하여 관리하는 방법을 사용.
Cookie는 클라이언트의 PC에 정보저장, Session은 서버에 정보 저장.

-쿠키를 통한 데이터전송
서버에서 쿠키를 Response하게 되며, 클라이언트에서는 
다음 요청시 저장된 쿠키정보를 함께 서버에 전송하기 위해 이들 쿠키를 저장한다.

세션과 쿠키의 비교
-세션
	저장소		:서버(세션값을 사용자가 조작못함)
	저장형식	:Object타입
	종료시점	:서버 리소스에 따라 (20~25분 단위로 세션종료)
	용량제한	:제한없음
-쿠키
	저장소		:클라이언트
	저장형식	:텍스트형식 .txt
	종료시점	:브라우저 종료시, 쿠키 설정시 지정한 시간
	용량제한	:도메일당 20개, 쿠키하나당 4kb (저용량)

-쿠키의 작성
쿠키는 일정정보들을 웹 브라우저(클라이언트)로 보내어 웹 브라우저에 저장되고 
필요시 다시 웹서버로 전달.
쿠키는 Cookie라는 컬렉션을 노출하는 HttpResponse개체를 통해 브라우저에 전달
Page클래스의 Response속성을 통해 HttpResponse개체에 액세스 가능

1)직접 Cookie콜렉션에 값을 저장
	Response.Cookies["쿠키명"].Value =쿠키값;
2)HttpCookie클래스 이용하여 쿠키작성	
	-->하나의 객체에 여러개의 값을 추가할 수 있는 장점
	HttpCookie 객체명 = new HttpCookie("쿠키명");
	객체명.Value = 값;
	Response.Cookies.Add(객체명);

-쿠키 읽기
HttpRequest객체를 이용하여 쿠키를 읽어옴
Page클래스의 Request속성으로 사용
	Request.Cookis["쿠키명"].Value;
